<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SCTF 2024 Crypto</title>
    <link href="/2025/01/23/SCTF%202024%20Crypto/"/>
    <url>/2025/01/23/SCTF%202024%20Crypto/</url>
    
    <content type="html"><![CDATA[<h2 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RSA</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, nbits</span>):<br>        <span class="hljs-variable language_">self</span>.nbits = nbits<br>        <span class="hljs-variable language_">self</span>.p, <span class="hljs-variable language_">self</span>.q = <span class="hljs-variable language_">self</span>.getPrimes()<br>        <span class="hljs-variable language_">self</span>.n = <span class="hljs-variable language_">self</span>.p*<span class="hljs-variable language_">self</span>.q<br>        <span class="hljs-variable language_">self</span>.Gift = <span class="hljs-variable language_">self</span>.Gift()<br>        <span class="hljs-variable language_">self</span>.priv, <span class="hljs-variable language_">self</span>.pub = <span class="hljs-variable language_">self</span>.keyGen()<br>        <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getPrimes</span>(<span class="hljs-params">self</span>):<br>        nbits = <span class="hljs-variable language_">self</span>.nbits<br>        p = random_prime(<span class="hljs-number">2</span>^(nbits-<span class="hljs-number">1</span>),lbound=<span class="hljs-number">2</span>^(nbits-<span class="hljs-number">2</span>))<br>        q = random_prime(<span class="hljs-number">2</span>^(nbits-<span class="hljs-number">1</span>),lbound=<span class="hljs-number">2</span>^(nbits-<span class="hljs-number">2</span>))<br>        <span class="hljs-keyword">while</span> p == q:<br>            q = random_prime(<span class="hljs-number">2</span>^(nbits-<span class="hljs-number">1</span>),lbound=<span class="hljs-number">2</span>^(nbits-<span class="hljs-number">2</span>))<br>        <span class="hljs-keyword">return</span> p,q<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Gift</span>(<span class="hljs-params">self</span>):<br>        p,q = <span class="hljs-variable language_">self</span>.p, <span class="hljs-variable language_">self</span>.q<br>        <span class="hljs-keyword">return</span> (p^<span class="hljs-number">2</span> + p + <span class="hljs-number">1</span>)*(q^<span class="hljs-number">2</span> + q + <span class="hljs-number">1</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">keyGen</span>(<span class="hljs-params">self</span>):<br>        nbits = <span class="hljs-variable language_">self</span>.nbits<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            d = randint(<span class="hljs-number">2</span>^(nbits//<span class="hljs-number">4</span>),<span class="hljs-number">2</span>^(nbits//<span class="hljs-number">2</span>))<br>            <span class="hljs-keyword">if</span> gcd(d,<span class="hljs-variable language_">self</span>.Gift) != <span class="hljs-number">1</span>:<br>                d = randint(<span class="hljs-number">2</span>^(nbits//<span class="hljs-number">4</span>),<span class="hljs-number">2</span>^(nbits//<span class="hljs-number">2</span>))<br>            e = <span class="hljs-built_in">pow</span>(d,-<span class="hljs-number">1</span>,<span class="hljs-variable language_">self</span>.phi)<br>            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">self</span>.p,<span class="hljs-variable language_">self</span>.q,<span class="hljs-variable language_">self</span>.n,e,d),(<span class="hljs-variable language_">self</span>.n,e)<br>    <br><br>RRR = RSA(<span class="hljs-number">512</span>)<br><br>bp = long_to_bytes(<span class="hljs-built_in">int</span>(RRR.p))<br>FLAG = <span class="hljs-string">&#x27;SCTF&#123;&#x27;</span>+md5(bp).hexdigest()+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;N = <span class="hljs-subst">&#123;RRR.n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;RRR.pub[<span class="hljs-number">1</span>]&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">N = 32261421478213846055712670966502489204755328170115455046538351164751104619671102517649635534043658087736634695616391757439732095084483689790126957681118278054587893972547230081514687941476504846573346232349396528794022902849402462140720882761797608629678538971832857107919821058604542569600500431547986211951</span><br><span class="hljs-string">e = 334450817132213889699916301332076676907807495738301743367532551341259554597455532787632746522806063413194057583998858669641413549469205803510032623432057274574904024415310727712701532706683404590321555542304471243731711502894688623443411522742837178384157350652336133957839779184278283984964616921311020965540513988059163842300284809747927188585982778365798558959611785248767075169464495691092816641600277394649073668575637386621433598176627864284154484501969887686377152288296838258930293614942020655916701799531971307171423974651394156780269830631029915305188230547099840604668445612429756706738202411074392821840</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>$e$ 的数量级大概是 $N$ 的两倍，直接连分数分解 $e$ 和 $N^2$ 就可以得到 $k$ 和 $d$ ，然后解方程得到 $p$ 和 $q$ </p><h2 id="Whisper"><a href="#Whisper" class="headerlink" title="Whisper"></a>Whisper</h2><p>Two public key certificates were monitored. And Mr. Dual intercepted a ciphertext. Just when he was in the rough, a Careless Whisper told that the length of a key parameter is carelessly set to 345 bits.</p><p>题目给了两个pem文件，解析出来两个 $e$ 是相同的，通过上文的题目描述可以知道有一个关键参数是345位，可能是 $\phi(N)$ ，还有一个人名 <a href="https://elliptic-shiho.github.io/ctf-writeups/#!ctf/2017/0CTF%20Finals/cr1000-AuthenticationSecrecy/README.md">Dual</a> 提示了一下，直接套板子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> itertools<br><br><span class="hljs-comment"># display matrix picture with 0 and X</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_overview</span>(<span class="hljs-params">BB</span>):<br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        a = (<span class="hljs-string">&#x27;%02d &#x27;</span> % ii)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">1</span>]):<br>            a += <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-keyword">if</span> BB[ii, jj] == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;X&#x27;</span><br>            <span class="hljs-keyword">if</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">60</span>:<br>                a += <span class="hljs-string">&#x27; &#x27;</span><br>        <span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dual_rsa_liqiang_et_al</span>(<span class="hljs-params">e, n1, n2, delta, mm, tt</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Attack to Dual RSA: Liqiang et al.&#x27;s attack implementation</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br>    N = (n1 + n2) // <span class="hljs-number">2</span><br>    A = ZZ(floor(N^<span class="hljs-number">0.5</span>))<br><br>    _XX = ZZ(floor(N^delta))<br>    _YY = ZZ(floor(N^<span class="hljs-number">0.5</span>))<br>    _ZZ = ZZ(floor(N^(delta - <span class="hljs-number">1.</span>/<span class="hljs-number">4</span>)))<br>    _UU = _XX * _YY + <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># Find a &quot;good&quot; basis satisfying d = a1 * l&#x27;11 + a2 * l&#x27;21</span><br>    M = Matrix(ZZ, [[A, e], [<span class="hljs-number">0</span>, n1]])<br>    B = M.LLL()<br>    l11, l12 = B[<span class="hljs-number">0</span>]<br>    l21, l22 = B[<span class="hljs-number">1</span>]<br>    l_11 = ZZ(l11 / A)<br>    l_21 = ZZ(l21 / A)<br><br>    modulo = e * l_21<br>    F = Zmod(modulo)<br><br>    PR = PolynomialRing(F, <span class="hljs-string">&#x27;u, x, y, z&#x27;</span>)<br>    u, x, y, z = PR.gens()<br><br>    PK = PolynomialRing(ZZ, <span class="hljs-string">&#x27;uk, xk, yk, zk&#x27;</span>)<br>    uk, xk, yk, zk = PK.gens()<br><br>    <span class="hljs-comment"># For transform xy to u-1 (unravelled linearlization)</span><br>    PQ = PK.quo(xk*yk+<span class="hljs-number">1</span>-uk)<br><br>    f = PK(x*(n2 + y) - e*l_11*z + <span class="hljs-number">1</span>)<br>    fbar = PQ(f).lift()<br><br>    <span class="hljs-comment"># Polynomial construction</span><br>    gijk = &#123;&#125;<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, mm + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, mm - k + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, mm - k - i + <span class="hljs-number">1</span>):<br>                gijk[i, j, k] = PQ(xk^i * zk^j * PK(fbar) ^ k * modulo^(mm-k)).lift()<br><br>    hjkl = &#123;&#125;<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, tt + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(floor(mm / tt) * j, mm + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, k + <span class="hljs-number">1</span>):<br>                hjkl[j, k, l] = PQ(yk^j * zk^(k-l) * PK(fbar) ^ l * modulo^(mm-l)).lift()<br><br>    monomials = []<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> gijk.keys():<br>        monomials += gijk[k].monomials()<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> hjkl.keys():<br>        monomials += hjkl[k].monomials()<br><br>    monomials = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>(monomials))[::-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(monomials) == <span class="hljs-built_in">len</span>(gijk) + <span class="hljs-built_in">len</span>(hjkl)  <span class="hljs-comment"># square matrix?</span><br>    dim = <span class="hljs-built_in">len</span>(monomials)<br><br>    <span class="hljs-comment"># Create lattice from polynomial g_&#123;ijk&#125; and h_&#123;jkl&#125;</span><br>    M = Matrix(ZZ, dim)<br>    row = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> gijk.keys():<br>        <span class="hljs-keyword">for</span> i, monomial <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(monomials):<br>            M[row, i] = gijk[k].monomial_coefficient(monomial) * monomial.subs(uk=_UU, xk=_XX, yk=_YY, zk=_ZZ)<br>        row += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> hjkl.keys():<br>        <span class="hljs-keyword">for</span> i, monomial <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(monomials):<br>            M[row, i] = hjkl[k].monomial_coefficient(monomial) * monomial.subs(uk=_UU, xk=_XX, yk=_YY, zk=_ZZ)<br>        row += <span class="hljs-number">1</span><br><br>    matrix_overview(M)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=&#x27;</span> * <span class="hljs-number">128</span>)<br><br>    <span class="hljs-comment"># LLL</span><br>    B = M.LLL()<br><br>    matrix_overview(B)<br><br>    <span class="hljs-comment"># Construct polynomials from reduced lattices</span><br>    H = [(i, <span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(dim)]<br>    H = <span class="hljs-built_in">dict</span>(H)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(dim):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(dim):<br>            H[i] += PK((monomials[j] * B[i, j]) / monomials[j].subs(uk=_UU, xk=_XX, yk=_YY, zk=_ZZ))<br>    H = <span class="hljs-built_in">list</span>(H.values())<br><br>    PQ = PolynomialRing(QQ, <span class="hljs-string">&#x27;uq, xq, yq, zq&#x27;</span>)<br>    uq, xq, yq, zq = PQ.gens()<br><br>    <span class="hljs-comment"># Inversion of unraveled linearization</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(dim):<br>        H[i] = PQ(H[i].subs(uk=xk*yk+<span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># Calculate Groebner basis for solve system of equations</span><br>    I = Ideal(*H[<span class="hljs-number">1</span>:<span class="hljs-number">20</span>])<br>    g = I.groebner_basis(<span class="hljs-string">&#x27;giac&#x27;</span>)[::-<span class="hljs-number">1</span>]<br>    mon = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> t: t.monomials(), g))<br><br>    PX = PolynomialRing(ZZ, <span class="hljs-string">&#x27;xs&#x27;</span>)<br>    xs = PX.gen()<br><br>    x_pol = y_pol = z_pol = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(g)):<br>        <span class="hljs-keyword">if</span> mon[i] == [xq, <span class="hljs-number">1</span>]:<br>            <span class="hljs-built_in">print</span>(g[i] / g[i].lc())<br>            x_pol = g[i] / g[i].lc()<br>        <span class="hljs-keyword">elif</span> mon[i] == [yq, <span class="hljs-number">1</span>]:<br>            <span class="hljs-built_in">print</span>(g[i] / g[i].lc())<br>            y_pol = g[i] / g[i].lc()<br>        <span class="hljs-keyword">elif</span> mon[i] == [zq, <span class="hljs-number">1</span>]:<br>            <span class="hljs-built_in">print</span>(g[i] / g[i].lc())<br>            z_pol = g[i] / g[i].lc()<br><br>    <span class="hljs-keyword">if</span> x_pol <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> y_pol <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> z_pol <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[-] Failed: we cannot get a solution...&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    x0 = x_pol.subs(xq=xs).roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    y0 = y_pol.subs(yq=xs).roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    z0 = z_pol.subs(zq=xs).roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># solution check</span><br>    <span class="hljs-keyword">assert</span> f(x0 * y0 + <span class="hljs-number">1</span>, x0, y0, z0) % modulo == <span class="hljs-number">0</span><br><br>    a0 = z0<br>    a1 = (x0 * (n2 + y0) + <span class="hljs-number">1</span> - e * l_11 * z0) / (e * l_21)<br><br>    d = a0 * l_11 + a1 * l_21<br>    <span class="hljs-keyword">return</span> d<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    delta = <span class="hljs-number">0.334</span><br>    mm = <span class="hljs-number">4</span><br>    tt = <span class="hljs-number">2</span><br><br>    n1 = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;1b 5d 4f e0 aa 67 82 e2 75 d4 ce 12 a6 d5 75 62 ef bb e7 db 6f 52 77 25 5b 89 17 29 bf a2 a1 8d 3e db 49 84 3d 79 89 a3 7b 95 16 be 2d f8 ca 93 90 58 e6 5f 64 b5 fb 20 71 be a4 f5 f8 d1 39 28 95 b3 2b f0 37 7d 99 f4 f7 99 79 12 5e 5d b0 1c db 50 80 a1 c2 d6 65 c9 ac 31 b5 82 30 25 49 9c 95 13 27 7b ae 5e 7a 84 6c d2 71 c4 39 6e 2b a2 19 02 0e 58 a9 05 5c b1 8a 28 d3 6a 00 bf 71 7b &quot;</span>.replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&quot;</span>),<span class="hljs-number">16</span>)<br>    e = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;07 9f 5c cc 66 57 67 b4 a2 57 e5 c1 ff 56 e9 80 3d f2 e5 65 03 02 da ad 42 01 05 fe 67 24 47 74 3b d3 f0 be a1 c4 6a 49 87 93 2e 9a 88 6c a8 7a 7a fd 77 96 ab f1 e5 62 9c 49 86 fe 4f 22 e8 9c dc e7 ab b0 66 24 46 51 46 a2 e2 b6 ca 9a b3 19 6c ea b7 46 79 74 c1 dc 45 60 8a 20 04 11 b2 91 fd af 99 f7 d8 0d ce 4d b3 56 6f 4a 9e 2e 57 4c 62 24 cd 07 d8 06 38 d2 8f 78 20 bc f4 b4 91 43&quot;</span>.replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&quot;</span>),<span class="hljs-number">16</span>)<br>    n2 = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;07 1c 32 4e 87 69 49 31 87 c1 5f 72 d5 cc 69 57 29 b4 84 88 ee 3f bd 01 db 00 d5 c4 78 f0 8c 7c f3 20 93 ba 61 74 50 51 d3 e9 d1 69 52 3a a9 14 38 18 1f 47 67 9a ff 5e dd 22 95 0f 74 a1 eb 14 43 32 0a aa 5d 97 f5 c1 e8 1b 5e f9 a3 e6 9b a6 69 ab c4 c6 c4 b4 05 f5 08 8a 60 3a 74 f9 bc ef 88 82 3b 45 23 57 41 14 c8 10 60 08 38 72 81 96 f8 e5 e0 d4 ae ee ea b7 9d d8 68 3a 72 f3 c0 17 &quot;</span>.replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&quot;</span>),<span class="hljs-number">16</span>)<br>    c = bytes_to_long(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ciphertext.txt&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read())<br><br>    d = dual_rsa_liqiang_et_al(e, n1, n2, delta, mm, tt)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;d = <span class="hljs-subst">&#123;d&#125;</span>&quot;</span>)<br>    m1 = <span class="hljs-built_in">pow</span>(c,<span class="hljs-built_in">int</span>(d),n1)<br>    m2 = <span class="hljs-built_in">pow</span>(c,<span class="hljs-built_in">int</span>(d),n2)<br>    flag1 = long_to_bytes(m1)<br>    flag2 = long_to_bytes(m2)<br>    <br>    <span class="hljs-built_in">print</span>(flag1 + flag2)<br></code></pre></td></tr></table></figure><h2 id="不完全阻塞干扰"><a href="#不完全阻塞干扰" class="headerlink" title="不完全阻塞干扰"></a>不完全阻塞干扰</h2><p>抽象文件，要手动提取参数，提取出来是 $p$ 和 $q$ 的高位，二元coppersmith</p><h2 id="LinearARTs"><a href="#LinearARTs" class="headerlink" title="LinearARTs"></a>LinearARTs</h2>]]></content>
    
    
    <categories>
      
      <category>复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024全国密码数学挑战赛</title>
    <link href="/2024/09/09/2024%E5%85%A8%E5%9B%BD%E5%AF%86%E7%A0%81%E6%95%B0%E5%AD%A6%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2024/09/09/2024%E5%85%A8%E5%9B%BD%E5%AF%86%E7%A0%81%E6%95%B0%E5%AD%A6%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">N1=<span class="hljs-number">0xa4d80845630d3b332f74f667ec8a0e49aba15b6f0c4f4006161d62c91b78cf6811421cc76609d2d9dba2c43be9d8ecdc6a0dff64a8041dcde52c7f92820b0a38fc91419e8ec9a5c69d47edc6e347934b4d87f97c5759886dac6c1143ff55b8eb11acfaa6cc70956a8ec7796e1a063b123bc2e467e30937c5a69c7ab5f8ed17e1</span><br>e1=<span class="hljs-number">0x3458c2e97adef45f741c7db11ece6c0814aa5b6fad9144242cdaa16a6b4f3622477935f98a41765b92892b4de22a391cf08767447df113f5151c86edd109b97f9b045fd8ad5d7a51084684d4e2353db6c0e474d5d79f399a2bf4fd867ec85b7960845ab5497f705914912f797804c06dcff57139e040596d22b141e54835e0d3</span><br>c1=<span class="hljs-number">0x91b097a5b1f6b12accdbda15cd2247384e1b3ed8311085a0f3e0dbb5fffce650a355600a02674189d1b7f4075df079c70354a08646e85ecf31dd150220cd1d4ce22d55a946500f4bd8def74fb0acea3e8d2e7bb1d27ebf2ca2e80fc28c3f0d88a041d4a556a18147f66b88c65f19c99b4b94c3f78d468b8accb4da7e7ce31b29</span><br></code></pre></td></tr></table></figure><p>已知信息：私钥 $d_1$ 的取值范围为[$2^{249}$,$2^{250}$]</p><p>满足维纳攻击界限 $d &lt; \frac{1}{3}N^{\frac{1}{4}}$，直接解出flag即可</p><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">N2=<span class="hljs-number">0xd231f2c194d3971821984dec9cf1ef58d538975f189045ef8a706f6165aab4929096f61a3eb7dd8021bf3fdc41fe3b3b0e4ecc579b4b5e7e035ffcc383436c9656533949881dca67c26d0e770e4bf62a09718dbabc2b40f2938f16327e347f187485aa48b044432e82f5371c08f6e0bbde46c713859aec715e2a2ca66574f3eb</span><br>e2=<span class="hljs-number">0x5b5961921a49e3089262761e89629ab6dff2da1504a0e5eba1bb7b20d63c785a013fd6d9e021c01baf1b23830954d488041b92bca2fe2c92e3373dedd7e625da11275f6f18ee4aef336d0637505545f70f805902ddbacb21bb8276d34a0f6dfe37ede87dd95bb1494dbb5763639ba3984240f1178e32aa36ee3c5fcc8115dde5</span><br>c2=<span class="hljs-number">0x6a88a8fa2b8f28d96284298bab2061efeb35e3a086370e19523c15c429f5d783b9d4f32e31a402916f45ad4f2760ab30e77177335af44756bfbeef0f168b5e0dc8c3ddf75d141c358969cca0e7c2b8ab99ef8e33b031be1cbccd95b687682ac7b0dcc0d56f5651ee671d6358128d2e0801f247a6af4fe0dc5e8fb199eba0780f</span><br></code></pre></td></tr></table></figure><p>已知信息: 私钥 $d_2$ 的取值范围为[$2^{285}$,$2^{286}$]</p><p>满足 $BD$ 界限 $d &lt; N^{0.292}$，直接解出flag即可</p><table><thead><tr><th>m&#x2F;delta</th><th>.275</th><th>.276</th><th>.277</th><th>.278</th><th>.279</th><th>.280</th></tr></thead><tbody><tr><td><strong>10</strong></td><td></td><td>F</td><td></td><td>F</td><td>F</td><td>F</td></tr><tr><td><strong>11</strong></td><td>F</td><td>T</td><td>T</td><td>T</td><td>T</td><td>F</td></tr></tbody></table><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">N3=<span class="hljs-number">0xf4c548636db62ffcc7ac4a0797952bea9a65bd426175af2435f72657e67ec8194667bfa94ce23c6f1e5baf3201867ab41701f6b8768e71009c41a3d5e9e7c109455341d549c7611f9f52851a2f017906aa9ccbedb95d238468e2c8577d30ecc4f158e3811fd5e2a6051443d468e3506bbc39bba710e34a604ac9e85d0feef8b3</span><br>e3=<span class="hljs-number">0x16f4b438ba14e05afa944f7da9904f8c78ea52e4ca0be7fa2b5f84e22ddd7b0578a3477b19b7bb4a7f825acc45da2dd10e62dbd94a3386b97d92ee817b0c66c1507514a7860b9139bc2ac3a4e0fe304199214da00a4ca82bfcb7b18253e7e6144828e584dac2dfb9a03fabaf2376ce7c269923fbb60fc68325b9f6443e1f896f</span><br>c3=<span class="hljs-number">0x26b1823cf836b226e2f5c90fdcd8420dbfcd02765b26e52ef3e5c0ab494c2f4650e475e280b0b5fff0d5016621186420b09e4706a5866e4a3319f23ef09d92c4e36acba39a0f6213fbe5ee1a736ce383e6e12351e6cbfd43f10a96b7fe34bdbaf948f2fb075d9063723c9f747fe6247ae9209e5d417faf2e37e6fee2eb863556</span><br></code></pre></td></tr></table></figure><p>已知信息: 私钥 $d_3$ 的取值范围为[$2^{299},2^{300}$]</p><p>很明显这里的私钥 $d$ 已经接近了 $BD$ 的理论界限 $N^{0.292}$，但是在格的维数过大的情况下理论计算时间非常大（直接BD调参数应该是算不出来的）</p><p>我们参考的<a href="https://link.springer.com/article/10.1007/s10623-023-01295-5">这一篇论文</a>，使用 binary search 爆破 $p$ 的高位<br>大概统计了一下，j爆破到10是需要很久的，我们当时已经完成了大部分的题目，分解出的 $p$ 或者 $q$ 的MSB是0b111，根据这个缩小了一点范围（取巧了）</p><p><code>经统计，从j=1开始，如果没缩范围，需要遍历984次；缩了范围，需要217次</code><br><code>对于m=12的bd，每次584s（10分钟），217次是35h（1.5天），984次是160h（6.6天）</code></p><blockquote><p>设定 $s :&#x3D; p + q$，$s_m$ 和 $s_l$ 分别表示 $s$ 的MSBs和LSBs, 则 $s &#x3D; 2^{L}s_m + s_l$, 其中 $L$ 为 $s_l$ 的比特位数<br>代入关系式 $ed &#x3D; 1 + k(N - (p + q - 1))$, 可得 $ed &#x3D; 1 + k(N - (2^{L}s_m + s_l - 1))$. 如果通过遍历的方法得到 $s_m$ 的值, 令 $f(x,y) &#x3D; x(N + 1 - 2^{L}s_m - y)$ 以及 $x &#x3D; k,y &#x3D; s_l$.<br>假设 $s$ 和 $s_l$ 的界限分别为 $Y$和 $Y_1$, 有 $Y_1 &lt; Y$. 这样处理相当于把界限从 $Y$ 缩小到 $Y_1$, 使其满足攻击条件.<br>假设 $e &#x3D; N^{\alpha}$，$d &#x3D; N^{\beta}$. 在这种情况下再用Boneh-Durfee格攻击寻找满足 $f(x,y) \equiv 0 \pmod{e},|x_0| &lt; X :&#x3D; 2N^{\alpha + \beta - 1},|y_0| &lt; Y_1$ 的解 $(x_0,y_0) &#x3D; (k,s_l)$ 即可成功分解 $N$.</p></blockquote><p>实际上我们的程序优化并不完善，最后解出来大概是160H</p><p><a href="https://tangcuxiaojikuai.xyz/post/4a67318c.html#more">糖醋小鸡块</a>师傅的博客中的剪枝思路也非常好，转载一下：</p><ul><li>如果把当前 $p$ 的高位后面全部补充0的值当做 $p_0$，那么 $N$ 除以 $p_0$ 得到的结果应该大于 $q$，也就是应该大于512bit</li><li>如果把当前 $p$ 的高位后面全部补充1的值当做 $p_1$，那么 $N$ 除以 $p_1$ 得到的结果应该小于 $q$，也就是应该小于512bit</li></ul><p>按照这个思路能够将搜索空间减少到原来的十分之一不到，一天内就可以出来结果（TQL）</p><h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">N4=<span class="hljs-number">0xd46dd141810786e451320ca452b379024fd263501ae767760f3dcf34b79806b85e36b0fee538dac61a5872c37d051a8a026384d09f12b7e1adae7eb15c4d75878007ee0043c2186cf8999c59eb66f689f55baf190bd80e70bf47b553be76bd4efffc782a51b43314d54b83fc19461e1beb6021164f64723b505e5a619cb62335</span><br>e4=<span class="hljs-number">0x92fbeeef2d40eb125234cfe4c063c4607f12aec7e3014b32fb4600e58c4eac1ec485192a1b03745632f2966311ad68bd1e49dd9d08b2bff67f58e214c8d7bae0142559994c24e347ff7555c86aa30ccd03cf794e6f00eead7f15e24f33da61fae11ec81e4e09bcc76c1a0ed5ca8c2f512856cdb42470beee7111a2410188697d</span><br>c4=<span class="hljs-number">0x8c5e9db89f96d769f6514836407755caf71b7bc6f5db2246200b0f824dac7ea3be5ba022c0e191d76c69b7d20c7cad5c49e381479c7cbe7ba055ce8aec2cad1a19d42aa5c4b8c07c67e22c70289891d53c3d55dff50e506ec7fb480df44f9b3219f8c73e0702d8072e9f6aabed8bb5d35f583bea30ce850b154d4fd8c39e4fb8</span><br></code></pre></td></tr></table></figure><p>已知信息: 私钥 $d_4$ 的取值范围为[$2^{399},2^{400}$], 此外已知 $d_4$ 的汉明重量较轻, 其最高310位比特（MSBs）汉明重量不超过5, 剩余90位比特较为随机</p><p>Low Hamming Weight，<a href="https://link.springer.com/chapter/10.1007/11836810_15">参考论文</a>，综述(原链接挂了就这样贴上来吧)：</p><iframe src="/pdf/Implementation of RSA Attack Using 2-Dimensional Latticesby Constructing Hypotheses of Keys With Low Hamming Weight.pdf" width="600" height="500"></iframe><p>这个不超过5的意思是就是 $d_4$ 的MSBs中只有4个1<br>最高位必定是1的情况下我们可以爆破剩余的三个1的位置<br>剩下90的LSBs就可以通过构造二维格来求解<br>因为二维格求解的时间非常短，所以使得我们遍历 310 为的MSBs是可行的</p><blockquote><p>令 $G &#x3D; \left(<br>\begin{array}{cc}<br>a &amp; b \<br>c &amp; d<br>\end{array}<br>\right)$，$v &#x3D; \begin{pmatrix}<br>0 \<br>R<br>\end{pmatrix}$，其中 $C &#x3D; N^{\beta - \delta + 0.5}$，$R &#x3D; ed_m$，遍历小整数对 $(z_1,z_2)$<br>通过解方程 $G_{red}\begin{pmatrix}<br>z_1 \<br>z_2<br>\end{pmatrix}<br> &#x3D; G\begin{pmatrix}<br>x \<br>-y<br>\end{pmatrix} - G_{red}[G_{red}^{-1}v]$ 求出 $(x_0,y_0) ：&#x3D; (d_l,k)$<br>其中 $d_l$ 是 $d$ 的未知LSBs，求出正确解后即可分解 $N$，在这里我们设置了$(z_1,z_2)$ 为0提高遍历效率</p></blockquote><p>我们的程序在4分钟成功分解了 $N$</p><h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">N5=<span class="hljs-number">0x94eab94581f4931a5ea6aabcfe0598600fa3e0a06573887aed69e274f14484472dc3feaf50d4ef384e502f747f5605c1d2a4c8172b6ef134b7e96d6c383a9cb967ccbbd8b3647848d34928982a274999c2df00bd7dd11bf25acd61411e3395637e85dd84ecf785ff1027eed91f3976c8186e2e940edcb5fed8d759a5028b47a1</span><br>e5=<span class="hljs-number">0x124c552642ef2467aaecde51b0f3e1bee2ebe87bae39a956ad56cf7eec669cdc7b9664ea435b4c3492b8e610e0a182e1a76c7af443ca2962672b4e703c4f359cf8d88a67db77be2491b74bcdae58691b69e6ea06d067815b26fc0d669d8c06f11a728154dc8cdf983a056633fecadc417df4304625c3e6f91ec3d655a91a29e9</span><br>c5=<span class="hljs-number">0x63e09028c774513b5420236f8405f970c8d97c8347697c44f50b23e5cc964c921413b5e6742bb5ba7ef49f032e372f502babc0040f9c7cc2c9f4e27d18aefff0e764529ba70f6a7b22d525d0aaeb1d21432817b6b148b8143c80a6401a5c9adfecf0c033181bb076a2192a4866c5355c9e401fba78d5f22b9c1661c0065a1a28</span><br></code></pre></td></tr></table></figure><p>已知信息：私钥 $d_5$ 的取值范围为[$2^{511},2^{512}$]，此外 $d_5$ 的最高256比特 MSBs（记为 $d_m$）及最低176位比特 LSBs（记为 $d_l$）取值均已知，但是中间80位比特（记为 $d_x$）取值未知，即满足如下关系：$d_5 &#x3D; d_l + d_x \cdot 2^{176} + d_m \cdot 2^{256}$</p><p>具体取值如下：<br>$$<br>\begin{cases}<br>d_l &#x3D; 0x2b26d177dc20ceea15de6e3c5a03207fb326a42d53a9 \\<br>d_m &#x3D; 0xacfad4bbb97a99b6bbc82c8b44a5260bcfe9c4a0acf437186ff4d5d1594cc5c1<br>\end{cases}<br>$$</p><p>私钥 $d$ 同时泄露MSBs和LSBs，<a href="https://link.springer.com/chapter/10.1007/11426639_22">参考论文</a>，赛题压缩包给的综述文献里面还提到了Takayasu-Kunihiro和STK格攻击这两种RSA的私钥泄露格攻击，缺少前置知识并且很复杂没有实现出来。（可能的优化点？）<br>不过这一道题使用<a href="https://link.springer.com/chapter/10.1007/11426639_22">参考论文</a>的fmsb1即可解出，还算是比较简单</p><blockquote><p>令 $d &#x3D; d_l + M_1(d_x + M_2d_m)$，其中 $d &#x3D; N^{\beta}，d_l &#x3D; N^{k}，d_x &#x3D; N^{\delta}，d_m &#x3D; N^{\beta - k - \delta}$<br>根据关系式 $ed &#x3D; k(N - (p + q - 1)) + 1$ 可知，$(x_0,y_0,z_0) :&#x3D; (d_x,k,p + q - 1)$ 是多项式 $f(x,y,z) :&#x3D; eM_1x - Ny + yz + R$ 的一组整数根，其中 $R &#x3D; ed_l + eM_1M_2d_m - 1$<br>根据 $Coppersmith$ 方法寻找满足 $f_e(x,y,z) \equiv 0 \pmod{e}，|x_0| &lt; X :&#x3D; N^{\delta}，|y_0| &lt; Y :&#x3D; N^{\beta}，|z_0| &lt; Z :&#x3D; 3N^{0.5}$ 的解 $(x_0,y_0,z_0) :&#x3D; (d_x,k,p + q - 1)$ 即可分解 $N$</p></blockquote><p>我们的程序在22s成功分解 $N$</p><h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">N6=<span class="hljs-number">0x94e4c83c67c6d6e33d83cc2953df899e8c4b33894f653d5bbc84d7dd9058e6949221897f6e5b7b8bd9013f495c906862e401436e77be585474066f6c220751dd9b2b8be66f07ad7f090547a6e759e482ba263b941b32c27c62c4b558d96dda168b28c52e550b7d7ff145a5996c0b398714cf5ee8f0ea1a3d5b17c592f1c15275</span><br>e6=<span class="hljs-number">0x949b2e72766be1e83ee278a56bc86a2d3268b719507068ac62c6d249a810284edaac39335e8d699630887c13864f4cdf1c0c423b2f7ae88ccc60a827332e6c410800c7c7a1677918c28aa51086991d1290fc64b8e1b0f14b482f35d86139bb3491a59e2ad99dcd35bd129a44c3b8e2667e405dc2d307a5bb5a1504d7ded3bda3</span><br>c6=<span class="hljs-number">0x6fd6fae8ab4e95e622e5dad2921c6f12e911df08768abf2d10d212ad9a26e4c5ec71640d7a6b3488064fd424224bc2c762b956af95a3212de37a57d74c0299936f48ae3d8b8803e644e8d1306ab735c94fd815fe8c77982b32d51e9b6f3b3d4f3753810b61fb528c3e9eb774dabd93a3c5c9919ae3fb90e8e998ed3e7f949738</span><br></code></pre></td></tr></table></figure><p>已知信息：私钥 $d_6$ 的取值范围为 [$2^{559},2^{560}$]，此外 $d_6$ 的最高123比特MSBs（记为 $d_m$）取值未知，但其余437位比特（记为 $d_l$）取值已知，即满足以下关系：$d_6 &#x3D; d_l + 2^{437}d_m$，$d_l$ 的具体取值如下：$d_l&#x3D;0x6da211f0d34b$</p><p>$d_l$ 发现其实是没有437比特那么大的，也就是说 $d$ 的中间有相当一部分的位数全为0<br>在赛题压缩包中的<a href="http://www.jcr.cacrnet.org.cn/CN/10.13868/j.cnki.jcr.000088">参考文献三</a>有提到这一种情况</p><p><img src="/img/bg/cmsecc6.png"></p><blockquote><p>令 $r$ 为 $d_l$ 的bit位数，即 $d &#x3D; d_l + 2^rd_m$，有 $1 &#x3D; ed - k\phi(N) &#x3D; e(d_l + 2^rd_m) - k(N - (p + q - 1))$<br>假设 $e &#x3D; N^{\alpha}，d &#x3D; N^{\beta}，A &#x3D; ed_l - 1，W &#x3D; 2^re$，有 $A - kN + k(p + q -1) \equiv 0 \pmod{W}$<br>可证 $k &lt; X :&#x3D; 2N^{\alpha + \beta - 1}，p + q - 1 &lt; Y :&#x3D; 3N^{0.5}$<br>令 $x &#x3D; k，y &#x3D; p + q - 1$，易得 $u &#x3D; xy + A &lt; U :&#x3D; 7N^{\alpha + \beta - 0.5}$<br>令 $f(x,y,u) :&#x3D; u - Nx$，根据 $Coppersmith$ 方法寻找满足 $f_W(x,y,z) \equiv 0 \pmod{W}$的解 $(x_0,y_0,z_0) :&#x3D; (k,p + q - 1),x_0y_0 + A$ 即可成功分解 $N$</p></blockquote><p>我们的程序在19s成功分解 $N$</p><h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">N7=<span class="hljs-number">0xaeb75bb97217271bf312a7897da81a544fe469ba0f1cf75304f2a5629717e1e3d0a9a28e71135443cc19f78c60dd3f7ea4ea28ae64657d5ac3b46e9755020de73cb5c4f89a682e0193916221bc8f4abb595f2c058bbb99e199a66144a9a9b258a74db847b2460107233280c94e854394595043f62bf77cd96c9ed3eca71b726d</span><br>e7=<span class="hljs-number">0x42b63e1113b4a84d0b037006a9bb729b52db495fa6b475bb64129a855a4ed6511792d0df946c5d7e22085d0db07bce5e408454a61c0cea51cf6d25e2455a2c6dc092e4b09bf4efb2157ffc1d1db3e969499479d721330ec4ac864e656318bc7bb9831a0dccf582406c87ae5d3ab9ffec351271dbb5481a0b6ed75a760b4f7e0d</span><br>c7=<span class="hljs-number">0xe1f90d9f115f9ba0b65ea8826ffec785bbe1b195fbb6f93c6ea28940f0d9b571930addb3e2714999ba5a19d17af22f1bc8da49f8b515ab03b6d276140b69fedf980d1aef78d0f3c0f6effdf2e92ce9195866f85672037537021178f8c65989b57f29de2c4c9306fe3e13aef29f962f86b8d5216907e85f28260b9f41cfe2651</span><br></code></pre></td></tr></table></figure><p>已知信息：私钥 $d_7$ 与 $phi_7$ 很接近，据估计，$phi_7 - d_7$ 的取值范围为[$2^{267},2^{268}$]</p><p>令 $r &#x3D; \phi(N) - d$，其取值范围为[$2^{267},2^{268}$]，对于关系式 $ed \equiv 1 \pmod{\phi(N)}$，根据同余性质，有 $e(d - \phi(N)) \equiv er \equiv 1 \pmod{\phi(N)}$，把 $r$ 看作新的私钥，$r &#x3D; N^{0.262}&lt; N^{0.292}$，直接 $BD$ 即可</p><h2 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">N8=<span class="hljs-number">0xf12eac2099c4190a6f586bea0b4fc3f9dff4f23f0cb8e42cbeff950aa1df8a373c49df7974fb33b4b6619eadb2d6c01f80da1b433295b199df11b323114c439884eb31fa568bd747ae37079e885e2490c3b5a56d61b9d10533983ff78fe85e07876fe2ae07ae7ea1c71f0f9c2d6beccdcd8baf046a58549aec19d45d48d7d92d</span><br>e8=<span class="hljs-number">0xb8906f5097658f27cc448d98974d9e7ccd4e8a8f25a80007826c341dcb2ac42420f899e5a89045fbefd9163bc94e6f98b4953546203be4bec249031587a27dbf</span><br>c8=<span class="hljs-number">0x162a6dee8bcbe24698b9249137c2a157890910fa74a56e7d2792b5b4f29112aba03448995ff32ed24bec5118f7433212196d3f99e1c794b61395d8183e4658c9dc05953a87c069c9390773c7f885907840ebd29676afac7bf3374d54c81c4e404f09716b9885d243c41dc48db561f8291b88826cae32bfd575a472e523f455c4</span><br></code></pre></td></tr></table></figure><p>已知信息：私钥 $d_8$ 的最低900比特LSBs（记为 $d_l$）取值已知，剩余约124位比特（记为 $d_m$）取值未知，即满足如下关系：$d_8 &#x3D; d_l + d_m*2^{900}$，$d_l$ 取值具体如下：$d_l$ &#x3D; 0x4cbec287edc86c5b2a9e1975d64d2a24d3930075f0d445163c7b1ceec9ee0319fe1166af348b49004d2420b83bcb82d4879e93dba01ee76c5ca1b7141490465e824bdb5e91d04016c6bbbaa41c4470747ee8163f710b2d8adb8ab2168dcc996b5ab5f85a2269dc459379fb68848cec487</p><p>其实直接用<a href="https://github.com/MengceZheng/crypto-attacks">Github的库</a>就可以出了(__bm6__函数)，感觉不太严谨还是找到了对应的<a href="https://link.springer.com/chapter/10.1007/978-3-540-45146-4_2">参考论文</a>(第六节)</p><blockquote><p>令 $M$ 为满足 $d &#x3D; d_l \pmod{M}$ 的整数，如果 $\alpha &#x3D; \log{N}(e) \leq \frac{7}{8}$，并且 $M \geq N^{\frac{1}{6} + \frac{1}{3}\sqrt{1 + 6\alpha} + \epsilon}$，就可以在多项式时间内分解 $N$<br>由于 $ed &#x3D; k\phi(N) + 1$，则有 $e(d_l + Md_m) &#x3D; k(N - (p + q)) + 1$，设 $f_{eM}(y,z) &#x3D; y(N - z) - ed_l + 1$，易得 $(y_0,z_0) :&#x3D; (k,p + q - 1)$，为该多项式模 $eM$ 下的根<br>令 $Y :&#x3D; N^{\alpha}，Z :&#x3D; 3N^{0.5}$，易证 $|y_0| \leq Y$，$|z_0| \leq Z$，给定整数 $m$ 和 $t$，定义如下多项式：</p><div>$$\begin{cases}g_{i,j} = y^j(eM)^if^{m-i}_{eM},i = 0,\ldots,m;j = 0,\ldots,i \\\\h_{i,j} = z^j(eM)^if^{m-i}_{eM},i = 0,\ldots,m;j = 1,\ldots,t \end{cases}$$</div>使用 $Gröbner$ 基方法即可在多项式时间内解出 $g_{i,j}$ 和 $h_{i,j}$ 在模 $(eM)^m$ 下的根 $(y_0,z_0) := (k,p + q - 1)$</blockquote><p>我们的程序在16分钟成功分解 $N$</p><h2 id="题目九"><a href="#题目九" class="headerlink" title="题目九"></a>题目九</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">e9=<span class="hljs-number">65537</span><br>N9=<span class="hljs-number">0xcc5b706f373a79c680cec9527aac573fd435129cf16c23334085bf97832e5a6c78b633c2f244b12a62f87ec5295dd89fcf3c808c39e45a9afdbda2f8d2d0b50d61b685c0fe9eb41a7018a40f98892f96d738e2a4e740d4e507bcbd07f68c1ecb2ca10bd780ce65265a7e4da00f1031a5db9d038878a29a5ffefcaf2119720005</span><br>c9=<span class="hljs-number">0x20bac8a7d73a74c9913377846c13c3d2bd9f47e6df118d1486a96ed184ca9910e0f250500065cfb44105a41dff655364cabc3067ef3cd3d7d983e75c9303b786ac97507cfe803b788b12e582232028ca9772d05004aef194076ec442e3ee55e17fbb4a57f332b4393ac056c024141cc2b82f9dbc6d3c77f6eff20cd0ecc9cbab</span><br></code></pre></td></tr></table></figure><p>已知信息：私钥 $d_9$ 的最低530位比特LSBs（记为 $d_l$）取值已知，剩余高位比特（记为 $d_m$）取值未知，即满足如下关系：$d_9 &#x3D; d_l + d_m*2^{530}$，$d_l$ 取值具体如下：$d_l$ &#x3D; 0x20142ae2802b877eb4dfa8a462e7d017c4d348181c367fd1a661ec9b6bbcca9dcb6601ccb6c10416b7f3c20129527346bbc136ee60f9945125cba03a9bba3720f7411</p><p>这道题和第八题类似，虽然泄露的LSBs变少了，但是 $e$ 也变小了，所以仍然满足我们在题目八中的攻击条件，调下参数就好了<br>我们的程序在1s成功分解了 $N$</p><h2 id="题目十"><a href="#题目十" class="headerlink" title="题目十"></a>题目十</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">e10=<span class="hljs-number">65537</span><br>N10=<span class="hljs-number">0x8d0df1ce526c39f9b057de462778a61ceda2049c7e32ee99d40baa4b22b7fd438e9ca1dfd7467684625add252095ee97c698199f4c5991279f6d3e74d4c14d01d137d42722df0d4565ff2a5275f9cac66dc4dfdf3304f85cbdc3d18eda1e32ac5d03675141a722ceefe0ea0533b53d7e50ed7eda1a1bbce47ed0ecb966f8678d</span><br>c10=<span class="hljs-number">0x3b42fa3dc9089a21e9dabfe18297df47272f7e0ff59bf9bf16bc55e7fa70504c03fed56ca5ae93ac028f60ce5da3c145c6d181c5bd3c267288ec4765a19ca6b957b4535a1a185bd1b87d2e39b30e2430ed648175c29fdc1fde3787c426783dd66ba17f98b42ba13a7b3532970d0aa31b5ffa5f3eae243337a1668bae456bfbfb</span><br></code></pre></td></tr></table></figure><p>已知信息：私钥 $d_{10}$ 的取值范围为[$a,b$]，$a$ 和 $b$ 的具体取值如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0x19ffe8024fcf0320b3107f380f2e7deff71d561c4266c0f439d1aca20cd43d2aa6aed8679a16b2e1d3ff4ba3fc4da69cf34e35ead6f7eb79923960b9c83d9923e591b07b65275bf67f0b3d424cd7e6e6dd88ea39a5cfa27ecee61caaacc93e751dbb2a4c196f0ce0c36d44c35d6658d71b6c48b7b29400ab9161a0000000000</span> \\<br>b = <span class="hljs-number">0x19ffe8024fcf0320b3107f380f2e7deff71d561c4266c0f439d1aca20cd43d2aa6aed8679a16b2e1d3ff4ba3fc4da69cf34e35ead6f7eb79923960b9c83d9923e591b07b65275bf67f0b3d424cd7e6e6dd88ea39a5cfa27ecee61caaacc93e751dbb2a4c196f0ce0c36d44c35d6658d71b6c48b7b29400ab9161affffffffff</span><br></code></pre></td></tr></table></figure><p>很明显 $a,b$ 的高位是相等的，所以这道题相当于是已知私钥 $d$ 的MSBs，赛题压缩包中的<a href="https://eprint.iacr.org/2020/1506">参考文献二</a>中给了一点思路</p><p><img src="/img/bg/cmsecc10.png"></p><p>注意到 $e$ 比较小，可以通过计算 $k &#x3D; \left\lceil \frac{ea - 1}{N} \right\rceil$ 的正确的 $k$</p><p>根据关系式 $ed - 1 &#x3D; k(N - (p + q -1))$，设定 $s :&#x3D; p + q$，通过计算 $N + 1 - \left\lceil \frac{ea - 1}{k} \right\rceil$ 可以得到 $s$ 的一个近似值 $\tilde{s}$，其值与 $s$ 的MSBs相等，并且相等位数取决于 $d$ 的未知LSBs比特位数</p><p>分别从高位开始遍历 $p,q$ 的MSBs，令 $\tilde{p}$ 和 $\tilde{q}$ 为遍历过程中 $p,q$ 的近似值，根据 $N &#x3D; p*q$，在遍历过程中确保：当 $\tilde{p}$ 和 $\tilde{q}$ 低位同时补0时，$\tilde{p} * \tilde{q} &lt; N$，当 $\tilde{p}$ 和 $\tilde{q}$ 低位同时补1时，$\tilde{p} * \tilde{q} &gt; N$，如果不满足则丢弃这一遍历分支，这样处理可以大幅提升遍历效率，得到 $p,q$ 的正确MSBs后就可以使用 $Coppersmith$ 方法计算出完整的 $p,q$</p><p>我们的程序在1s成功分解 $N$</p><h2 id="题目十一"><a href="#题目十一" class="headerlink" title="题目十一"></a>题目十一</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">e11=<span class="hljs-number">65537</span><br>N11=<span class="hljs-number">0xcb5645c59c402b0edcf96cbd6a7308b64aac2f37a3c6f96be7c421c4b7f0a4adbdecd88cbea1128352fb21baae583fe4ceb3fc93c4905803ad3e9214ada050d5c0ff785a13a5c9157c3154ad8d7015a2d239fe13ef836d3279c5cd5dc96013ac40f372a9c9226d2f5fe73f312c56e11d9cdfbf9fb0db627ac1a752f5f0bd2b29</span><br>c11=<span class="hljs-number">0x84e4aa0be481e9c4bbd4c71dba5235cccd8312759de35c326c7e4cdda494196d1c0cae298240942af3082fac215965999c908a79bf07e093ee0c402e727a09a1c1f13831875d66ebbc3f89507163de90339af055bcd7d778574775214accfbd8ae20001f27bc196b974cb3ac215fea3debb7b17a21a8ebb1a9880a671539ef21</span><br></code></pre></td></tr></table></figure><p>已知信息：私钥 $d_{11}$ 的取值范围为[$a,b$]，$a$ 和 $b$ 的具体取值如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">0x4f77b72b04e6fb2d02e5a43edef4784a2e22df0d42bfc7c9093a58ec35eb21a11962103be960b0088d0cc2e0dfb473bc2ba0a22cea1c73997442c8fab5e4bad22cd131055b0382eb9264ad40ec8257abaff11b33b173ffd0168039bf40dc203eb325d884d2845fd2b5a37f41a0f64183db0c256c244500000000000000000000</span><br>b=<span class="hljs-number">0x4f77b72b04e6fb2d02e5a43edef4784a2e22df0d42bfc7c9093a58ec35eb21a11962103be960b0088d0cc2e0dfb473bc2ba0a22cea1c73997442c8fab5e4bad22cd131055b0382eb9264ad40ec8257abaff11b33b173ffd0168039bf40dc203eb325d884d2845fd2b5a37f41a0f64183db0c256c2445ffffffffffffffffffff</span><br></code></pre></td></tr></table></figure><p>未知的私钥LSBs变为80bit，也满足题目十的攻击条件，一样的解法，1s</p><h2 id="题目十二"><a href="#题目十二" class="headerlink" title="题目十二"></a>题目十二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">e12=<span class="hljs-number">65537</span><br>N12=<span class="hljs-number">0x9fac422a93f6e486e3ddae088bb5f5d06dec183ab81290042a9c98c53352961a00db3e9def7adff842381a395cedf1d06294f0b63457133e4e44cabb7633c562dcbfffdffe541d66c46ddf6a28b686c478300bcf31945f2a6495f140e64f78fa5cd47d1885233f175f28e38f1bfc422a6853ca19a7dd47a291a9e7de78a67bf1</span><br>c12=<span class="hljs-number">0x35476c9d0e5ad9d364ea31d8f6628b92a4f6307b1fef754e49286bc7f53ea8cd013a7ebf2a21b2327af44498d267e19526c2051a02f22cca9cab567f7ceefe5003137e396c23742370e14ec2c6a90943ca848908e87420f560d34eae4635475effa867722276710c6f4b6cb9b295777d62f3f03c57603ac815072864aadbf041</span><br></code></pre></td></tr></table></figure><p>已知信息：素因子 $q_{12}$ 是模数 $N_{12} &#x3D; p_{12} * q_{12}$ 与整数的部分近似公因子，即 $N &#x3D; k * q_{12} + r$ 其中 $2^{511} &lt; k &lt; 2^{512}$ 和 $2^{255} &lt; r &lt; 2^{256}$ 均为正整数且 $N$ 的具体取值如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">N=<span class="hljs-number">0x8199f8d487909988daf7d692ce8b1ffb4c37aa8010c8ca337ae4398c521383dc51007645cb6a1743c9b52ec5808e9e0e6f54d5fbb143cf81651240beab342dfb4622f073c4f8ab968dd5c8d4be3b7dd55c2cb9ef9c06294cd87e5fa29e38279c850f03687dc8c83c68104dca88e3a5c8559a01c040e7d5107e4a9f2385429f90</span><br></code></pre></td></tr></table></figure><p>ACD(Approximate GCD)问题，当时找了非常多的论文，基本上构造的格都是对角线上 $N$ ，并且至少需要三组元素的，这里只有两组，最后我们找到的<a href="https://dl.acm.org/doi/abs/10.1145/3576915.3616629">参考论文</a></p><blockquote><p>设 $A &#x3D; kq + r$，其中 $k \in [2^{511},2^{512}]，r \in [2^{255},2^{256}]$，由于 $q|(A - r)$ 且 $q|N_{12}$，该题可以转换成为PACDP，使用论文中 3.1 节的方法<br>通过 $Coppersmith$ 方法求解多项式 $A \equiv r \pmod{q}$，因为 $r \approx N_{12}^{0.25}$，刚好为 $Coppersmith$ 的理论边界，计算时间变得非常大<br>通过遍历 $r$ 的部分MSBs可以显著降低计算时间，但是爆破位数越多同样时间也会增长<br>我们最后选择爆破 $r$ 的11位MSBs</p></blockquote><p>我们的程序在13m成功分解 $N$</p><h2 id="附加题-随机数发生器"><a href="#附加题-随机数发生器" class="headerlink" title="附加题-随机数发生器"></a>附加题-随机数发生器</h2><p>纯脑洞题，不想写，可以看看<a href="https://tangcuxiaojikuai.xyz/post/4a67318c.html#more">糖醋小鸡块师傅的博客</a></p><h2 id="比赛感受"><a href="#比赛感受" class="headerlink" title="比赛感受"></a>比赛感受</h2><p>这一次比赛是和<a href="https://skatexu.github.io/">skateXu</a>，<a href="https://www.iamnahco3.cn/">IamNaHCO3</a>两位学长一起打的（其实整个学院本科就我们三个密码手）。四月底开始打，我因为期间还有区块链科研的任务和期末考试，整个比赛其实贡献很少，还好是初赛到决赛还有一个月给我赶上了进度。</p><p>老师不报销是最难受的，广州这边过去青岛飞机高铁都需要1000往上走了，还有住宿费用，怎么算都是亏本比赛了。最后选择了最便宜的绿皮火车出行，在硬卧上躺了32小时才到蓝村。第一次坐绿皮上的硬卧，原来是上中下三个铺子，空间很小，躺着头都抬不起来，人要弯着腰进去，网络还很卡。一天基本上吃一顿泡面就够了，醒着的时间基本上都在床上看小说或者和学长们玩数独，实际上大部分时间都在睡觉（听别人外放土味视频和哈基米）。</p><p>到了蓝村之后转了两次大巴，到了某40一晚的民宿旅馆（比赛协议酒店300多一晚太贵了），这民宿旅馆纯鬼屋。很老旧和门和床，一闪一闪的灯泡，整个旅馆就住一个人，厕所比我拳头大的虫子，关不上的厕所门，要素拉满了，和鬼片里面的山村旧客栈一样的。最后越想越红温，在周围问了一圈，找到一个家庭套房170一晚三个人住，这个的环境还是不错的。</p><p>比赛最后是拿了个三等奖，可惜是输在了创新点吧，优化也有差距。坐在下面听特等奖答辩时才发现大家都有CRT代数算法优化，第三题的优化还有很大空间，纯当CTF打了嘿嘿。虽然前面对于住行吐槽很多，但是总的来说其实体验还是可以的，这次比赛学到了不少RSA算法（以后又可以当脚本小子啦），赛后王小云院士还带领我们参观了一下山大的网安学院。</p><p>在这边出去吃了几顿烧烤，比广州便宜好多啊，广州5元一串的牛羊肉在青岛就要2元，味道也很不错。山大青岛校区非常大，爽骑电动车。食堂也很好吃，就是忘记签到了没拿餐券，偷偷摸摸的混进去吃饭的。周围的景点没怎么逛过，比完赛那天晚上到了海边走了一圈</p><p><img src="/img/bg/cmsecc_view1.jpg"></p><p><img src="/img/bg/cmsecc_view2.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
